{{template "base.html" .}}

{{define "title"}}DNS Tools - HeaderAnalyzer{{end}}

{{define "content"}}
<div class="dns-tools-container">
    <div class="bg-dark-bg rounded-xl p-8 border border-dark-border">
        <h1 class="text-3xl font-bold text-dark-text mb-2">üåê DNS Tools</h1>
        <p class="text-dark-muted mb-6">Comprehensive DNS lookup and analysis tools for domains and IP addresses</p>
        
        <form class="dns-query-form" id="dnsForm" onsubmit="return false;">
            <input type="text" id="dnsInput" placeholder="Enter domain or IP" required 
                   class="flex-1 min-w-48 px-4 py-3 bg-dark-bg border border-dark-border rounded-lg text-dark-text placeholder-dark-muted focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20">
            <select id="dnsType" class="px-4 py-3 bg-dark-bg border border-dark-border rounded-lg text-dark-text focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20">
                <option value="A">A</option>
                <option value="AAAA">AAAA</option>
                <option value="MX">MX</option>
                <option value="TXT">TXT</option>
                <option value="NS">NS</option>
                <option value="CNAME">CNAME</option>
                <option value="PTR">PTR</option>
                <option value="SOA">SOA</option>
                <option value="SPF">SPF</option>
                <option value="DKIM">DKIM</option>
                <option value="DMARC">DMARC</option>
                <option value="WHOIS">WHOIS</option>
            </select>
            <input type="text" id="dnsServer" placeholder="Custom DNS server (optional)" 
                   class="w-48 px-4 py-3 bg-dark-bg border border-dark-border rounded-lg text-dark-text placeholder-dark-muted focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20">
            <button type="submit" class="btn btn-primary">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
                Query
            </button>
        </form>
        
        <div class="save-btns">
            <button onclick="saveResults('csv')" class="btn btn-success">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Save as CSV
            </button>
            <button onclick="saveResults('txt')" class="btn btn-success">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Save as TXT
            </button>
        </div>
    </div>
    
    <div class="dns-results" id="dnsResults"></div>
</div>

<!-- Popup notification container -->
<div id="popup-container" class="fixed top-4 right-4 z-50 space-y-2"></div>
{{end}}

{{define "scripts"}}
<script>
let results = [];

// Popup notification system
function showPopup(message, type = 'error', duration = 5000) {
    const container = document.getElementById('popup-container');
    const popup = document.createElement('div');
    popup.className = `popup-notification ${type}`;
    popup.innerHTML = `
        <button class="close-btn" onclick="this.parentElement.remove()">&times;</button>
        <div class="flex items-start gap-2">
            <div class="flex-shrink-0 mt-0.5">
                ${type === 'error' ? '‚ùå' : type === 'success' ? '‚úÖ' : type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è'}
            </div>
            <div class="flex-1">${message}</div>
        </div>
    `;
    
    container.appendChild(popup);
    
    // Trigger animation
    setTimeout(() => popup.classList.add('show'), 10);
    
    // Auto-remove after duration
    if (duration > 0) {
        setTimeout(() => {
            popup.classList.remove('show');
            setTimeout(() => popup.remove(), 300);
        }, duration);
    }
}

document.getElementById('dnsForm').addEventListener('submit', function() {
    const query = document.getElementById('dnsInput').value.trim();
    const type = document.getElementById('dnsType').value;
    const server = document.getElementById('dnsServer').value.trim();
    
    if (!query) {
        showPopup('Please enter a domain or IP address to query', 'warning');
        return;
    }
    
    let url = `/api/dns?query=${encodeURIComponent(query)}&type=${encodeURIComponent(type)}`;
    if (server) {
        url += `&server=${encodeURIComponent(server)}`;
    }
    
    // Add selector field for DKIM queries
    if (type === 'DKIM' && !query.includes(':')) {
        const selector = prompt('Enter DKIM selector (e.g., "selector1", "default"):');
        if (selector) {
            url = `/api/dns?query=${encodeURIComponent(query + ':' + selector)}&type=${encodeURIComponent(type)}`;
            if (server) {
                url += `&server=${encodeURIComponent(server)}`;
            }
        } else {
            showPopup('DKIM selector is required for DKIM queries', 'warning');
            return;
        }
    }
    
    // Show loading state
    const submitBtn = document.querySelector('button[type="submit"]');
    const originalText = submitBtn.innerHTML;
    submitBtn.innerHTML = `
        <svg class="animate-spin w-4 h-4" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Querying...
    `;
    submitBtn.disabled = true;
    
    fetch(url)
        .then(response => {
            if (!response.ok) {
                throw new Error(`Server error: ${response.status}`);
            }
            return response.text();
        })
        .then(data => {
            const timestamp = new Date().toLocaleString();
            const result = {
                timestamp: timestamp,
                query: query,
                type: type,
                server: server || 'Default',
                result: data
            };
            results.push(result);
            
            const resultDiv = document.createElement('div');
            resultDiv.className = 'dns-result-block';
            resultDiv.innerHTML = `
                <h3 class="text-blue-400 font-semibold mb-2">${type} query for ${query}</h3>
                <p class="text-dark-muted text-sm mb-3">Time: ${timestamp} | Server: ${server || 'Default'}</p>
                <pre class="bg-gray-900 text-dark-text p-3 rounded-lg overflow-x-auto text-sm">${data}</pre>
            `;
            document.getElementById('dnsResults').insertBefore(resultDiv, document.getElementById('dnsResults').firstChild);
            
            showPopup(`Successfully queried ${type} record for ${query}`, 'success', 3000);
        })
        .catch(error => {
            console.error('DNS Query Error:', error);
            const resultDiv = document.createElement('div');
            resultDiv.className = 'dns-result-block border-red-500/50';
            resultDiv.innerHTML = `
                <h3 class="text-red-400 font-semibold mb-2">‚ùå Error querying ${query}</h3>
                <pre class="bg-gray-900 text-red-300 p-3 rounded-lg text-sm">Error: ${error.message}</pre>
            `;
            document.getElementById('dnsResults').insertBefore(resultDiv, document.getElementById('dnsResults').firstChild);
            
            showPopup(`Failed to query ${query}: ${error.message}`, 'error');
        })
        .finally(() => {
            // Restore button
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        });
});

function saveResults(format) {
    if (results.length === 0) {
        showPopup('No results to save. Please run some DNS queries first.', 'warning');
        return;
    }
    
    let content = '';
    let filename = '';
    
    try {
        if (format === 'csv') {
            content = 'Timestamp,Query,Type,Server,Result\n';
            results.forEach(r => {
                const escapedResult = '"' + r.result.replace(/"/g, '""') + '"';
                content += `"${r.timestamp}","${r.query}","${r.type}","${r.server}",${escapedResult}\n`;
            });
            filename = 'dns-results.csv';
        } else if (format === 'txt') {
            results.forEach(r => {
                content += `=== ${r.type} query for ${r.query} ===\n`;
                content += `Time: ${r.timestamp}\n`;
                content += `Server: ${r.server}\n`;
                content += `Result:\n${r.result}\n\n`;
            });
            filename = 'dns-results.txt';
        }
        
        const blob = new Blob([content], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        a.click();
        URL.revokeObjectURL(url);
        
        showPopup(`Successfully exported ${results.length} results as ${format.toUpperCase()}`, 'success', 3000);
    } catch (error) {
        showPopup(`Failed to export results: ${error.message}`, 'error');
    }
}
</script>
{{end}}
